name: Update Checker
on:
  push:
    branches: [ master ] 
  workflow_dispatch:
    inputs:
      reason:
        description: '수동 실행 이유'
        required: false
        default: '정기 점검'

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # 전체 히스토리를 가져옵니다
    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "::set-output name=files::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')"
        else
          echo "::set-output name=files::$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')"
        fi
    - name: Create issue
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GIT_TOKEN}}
        script: |
          const changedFiles = '${{ steps.changed-files.outputs.files }}'.trim().split(' ');
          if (changedFiles.length > 0) {
            let issueBody = `
            # 업데이트 알림
            
            다음 파일들이 업데이트되었습니다:
            
            ${changedFiles.map(file => `- ${file}`).join('\n')}
            `;
            
            if ('${{ github.event_name }}' === 'push') {
              issueBody += `\n커밋: [${{ github.sha }}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})`;
            } else {
              issueBody += `\n수동 실행 이유: ${{ github.event.inputs.reason }}`;
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `업데이트 알림: ${new Date().toISOString()}`,
              body: issueBody
            });
          }
