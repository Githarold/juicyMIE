name: Update Checker and Auto Release
on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      reason:
        description: '수동 실행 이유'
        required: false
        default: '정기 점검'
permissions:
  contents: write
  issues: write
jobs:
  check-updates-and-analyze:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT
        else
          echo "files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')" >> $GITHUB_OUTPUT
        fi
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    - name: Install dependencies
      run: flutter pub get
    - name: Analyze code
      run: flutter analyze --no-fatal-infos > analyze_report.txt
    - name: Create issue
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GIT_TOKEN}}
        script: |
          const fs = require('fs');
          const changedFiles = '${{ steps.changed-files.outputs.files }}'.trim().split(' ');
          const analyzeReport = fs.readFileSync('analyze_report.txt', 'utf8');
          
          let issueBody = `
          # 업데이트 및 분석 보고서
          ## 변경된 파일:
          ${changedFiles.map(file => `- ${file}`).join('\n')}
          ## 코드 분석 결과:
          \`\`\`
          ${analyzeReport}
          \`\`\`
          `;
          
          if ('${{ github.event_name }}' === 'push') {
            issueBody += `\n커밋: [${{ github.sha }}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})`;
          } else {
            issueBody += `\n수동 실행 이유: ${{ github.event.inputs.reason }}`;
          }
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `업데이트 및 분석 보고서: ${new Date().toISOString()}`,
            body: issueBody
          });
  auto-release:
    needs: check-updates-and-analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: *//')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Bump version
        id: bump_version
        run: |
          chmod +x ./update_version.sh
          ./update_version.sh
      
      - name: Update changelog
        run: echo "- Automated release" >> CHANGELOG.md
      
      - name: Debug information
        run: |
          echo "Current version: ${{ steps.get_version.outputs.version }}"
          echo "New version: ${{ steps.bump_version.outputs.new_version }}"
          echo "Current commit: ${{ github.sha }}"
          cat pubspec.yaml
      
      - name: Commit changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pubspec.yaml CHANGELOG.md
          git commit -m "chore: Bump version to ${{ steps.bump_version.outputs.new_version }} and update changelog"
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          branch: ${{ github.ref }}
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          gh release create "$NEW_VERSION" \
            --target ${{ github.sha }} \
            --title "Release $NEW_VERSION" \
            --generate-notes